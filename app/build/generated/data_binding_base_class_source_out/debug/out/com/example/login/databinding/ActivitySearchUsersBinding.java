// Generated by view binder compiler. Do not edit!
package com.example.login.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.login.R;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySearchUsersBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final BottomNavigationView bottomNavigationView;

  @NonNull
  public final TextView findUsers;

  @NonNull
  public final ConstraintLayout findUsersLayout;

  @NonNull
  public final Button userSearchButton;

  @NonNull
  public final EditText usernameSearch;

  @NonNull
  public final RecyclerView usersList;

  private ActivitySearchUsersBinding(@NonNull RelativeLayout rootView,
      @NonNull BottomNavigationView bottomNavigationView, @NonNull TextView findUsers,
      @NonNull ConstraintLayout findUsersLayout, @NonNull Button userSearchButton,
      @NonNull EditText usernameSearch, @NonNull RecyclerView usersList) {
    this.rootView = rootView;
    this.bottomNavigationView = bottomNavigationView;
    this.findUsers = findUsers;
    this.findUsersLayout = findUsersLayout;
    this.userSearchButton = userSearchButton;
    this.usernameSearch = usernameSearch;
    this.usersList = usersList;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySearchUsersBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySearchUsersBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_search_users, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySearchUsersBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottomNavigationView;
      BottomNavigationView bottomNavigationView = ViewBindings.findChildViewById(rootView, id);
      if (bottomNavigationView == null) {
        break missingId;
      }

      id = R.id.findUsers;
      TextView findUsers = ViewBindings.findChildViewById(rootView, id);
      if (findUsers == null) {
        break missingId;
      }

      id = R.id.find_users_layout;
      ConstraintLayout findUsersLayout = ViewBindings.findChildViewById(rootView, id);
      if (findUsersLayout == null) {
        break missingId;
      }

      id = R.id.user_search_button;
      Button userSearchButton = ViewBindings.findChildViewById(rootView, id);
      if (userSearchButton == null) {
        break missingId;
      }

      id = R.id.username_search;
      EditText usernameSearch = ViewBindings.findChildViewById(rootView, id);
      if (usernameSearch == null) {
        break missingId;
      }

      id = R.id.users_list;
      RecyclerView usersList = ViewBindings.findChildViewById(rootView, id);
      if (usersList == null) {
        break missingId;
      }

      return new ActivitySearchUsersBinding((RelativeLayout) rootView, bottomNavigationView,
          findUsers, findUsersLayout, userSearchButton, usernameSearch, usersList);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
