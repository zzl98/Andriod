// Generated by view binder compiler. Do not edit!
package com.example.login.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.login.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AdapterUserBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView previewSomething;

  @NonNull
  public final TextView previewSomethingText;

  @NonNull
  public final TextView previewUsername;

  @NonNull
  public final TextView previewUsernameText;

  @NonNull
  public final LinearLayout userPreviewRow;

  private AdapterUserBinding(@NonNull LinearLayout rootView, @NonNull TextView previewSomething,
      @NonNull TextView previewSomethingText, @NonNull TextView previewUsername,
      @NonNull TextView previewUsernameText, @NonNull LinearLayout userPreviewRow) {
    this.rootView = rootView;
    this.previewSomething = previewSomething;
    this.previewSomethingText = previewSomethingText;
    this.previewUsername = previewUsername;
    this.previewUsernameText = previewUsernameText;
    this.userPreviewRow = userPreviewRow;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AdapterUserBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AdapterUserBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.adapter_user, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AdapterUserBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.preview_something;
      TextView previewSomething = ViewBindings.findChildViewById(rootView, id);
      if (previewSomething == null) {
        break missingId;
      }

      id = R.id.preview_something_text;
      TextView previewSomethingText = ViewBindings.findChildViewById(rootView, id);
      if (previewSomethingText == null) {
        break missingId;
      }

      id = R.id.preview_username;
      TextView previewUsername = ViewBindings.findChildViewById(rootView, id);
      if (previewUsername == null) {
        break missingId;
      }

      id = R.id.preview_username_text;
      TextView previewUsernameText = ViewBindings.findChildViewById(rootView, id);
      if (previewUsernameText == null) {
        break missingId;
      }

      LinearLayout userPreviewRow = (LinearLayout) rootView;

      return new AdapterUserBinding((LinearLayout) rootView, previewSomething, previewSomethingText,
          previewUsername, previewUsernameText, userPreviewRow);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
